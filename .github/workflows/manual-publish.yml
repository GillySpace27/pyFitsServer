# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build and upload a Python package to both Test PyPI and PyPI

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest  # Use Ubuntu for a robust CI environment

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Set up dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build release distributions
        run: |
          python -m build

      - name: Upload release distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  testpypi-publish:
    runs-on: ubuntu-latest  # Use Ubuntu for consistency

    needs:
      - release-build

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to Test PyPI
        run: |
          python -m pip install --upgrade twine
          python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

  realpypi-publish:
    runs-on: ubuntu-latest  # Use Ubuntu for consistency

    needs:
      - release-build
      
    if: false
    
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        run: |
          python -m pip install --upgrade twine
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
